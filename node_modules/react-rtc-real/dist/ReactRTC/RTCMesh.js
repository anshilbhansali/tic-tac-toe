"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _RTCVideo = _interopRequireDefault(require("./RTCVideo.js"));

var _Form = _interopRequireDefault(require("./Form.js"));

var _Websocket = _interopRequireDefault(require("./Websocket.js"));

var _PeerConnection = _interopRequireDefault(require("./PeerConnection.js"));

var _constants = require("./functions/constants");

var _utils = require("./functions/utils");

require("core-js/stable");

require("regenerator-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RTCMesh =
/*#__PURE__*/
function (_Component) {
  _inherits(RTCMesh, _Component);

  function RTCMesh(props) {
    var _this;

    _classCallCheck(this, RTCMesh);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RTCMesh).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "openCamera",
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(fromHandleOffer) {
        var _this$state, mediaConstraints, localMediaStream, mediaStream;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$state = _this.state, mediaConstraints = _this$state.mediaConstraints, localMediaStream = _this$state.localMediaStream;
                _context.prev = 1;

                if (localMediaStream) {
                  _context.next = 13;
                  break;
                }

                if (!_this.wantCamera) {
                  _context.next = 9;
                  break;
                }

                _context.next = 6;
                return navigator.mediaDevices.getUserMedia(mediaConstraints);

              case 6:
                mediaStream = _context.sent;
                _context.next = 12;
                break;

              case 9:
                _context.next = 11;
                return navigator.mediaDevices.getDisplayMedia(mediaConstraints);

              case 11:
                mediaStream = _context.sent;

              case 12:
                return _context.abrupt("return", fromHandleOffer === true ? mediaStream : _this.setState({
                  localMediaStream: mediaStream
                }));

              case 13:
                _context.next = 18;
                break;

              case 15:
                _context.prev = 15;
                _context.t0 = _context["catch"](1);
                console.error('getUserMedia Error: ', _context.t0);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 15]]);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty(_assertThisInitialized(_this), "handleOffer",
    /*#__PURE__*/
    function () {
      var _ref2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(data) {
        var _this$state2, localMediaStream, roomKey, socketID, payload, mediaStream;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _this$state2 = _this.state, localMediaStream = _this$state2.localMediaStream, roomKey = _this$state2.roomKey, socketID = _this$state2.socketID;
                payload = data.payload;
                _context3.next = 4;
                return _this.rtcPeerConnection.setRemoteDescription(payload.message);

              case 4:
                mediaStream = localMediaStream;

                if (mediaStream) {
                  _context3.next = 9;
                  break;
                }

                _context3.next = 8;
                return _this.openCamera(true);

              case 8:
                mediaStream = _context3.sent;

              case 9:
                _this.setState({
                  connectionStarted: true,
                  localMediaStream: mediaStream
                },
                /*#__PURE__*/
                _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee2() {
                  var answer, payload, answerMessage;
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return this.rtcPeerConnection.createAnswer();

                        case 2:
                          answer = _context2.sent;
                          _context2.next = 5;
                          return this.rtcPeerConnection.setLocalDescription(answer);

                        case 5:
                          payload = (0, _utils.createPayload)(roomKey, socketID, answer);
                          answerMessage = (0, _utils.createMessage)(_constants.TYPE_ANSWER, payload);
                          this.socket.send(JSON.stringify(answerMessage));

                        case 8:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, this);
                })));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty(_assertThisInitialized(_this), "handleAnswer",
    /*#__PURE__*/
    function () {
      var _ref4 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4(data) {
        var payload;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                payload = data.payload;
                _context4.next = 3;
                return _this.rtcPeerConnection.setRemoteDescription(payload.message);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());

    _defineProperty(_assertThisInitialized(_this), "handleIceCandidate",
    /*#__PURE__*/
    function () {
      var _ref5 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5(data) {
        var message, candidate;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                message = data.payload.message;
                candidate = JSON.parse(message);
                _context5.next = 4;
                return _this.rtcPeerConnection.addIceCandidate(candidate);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());

    _defineProperty(_assertThisInitialized(_this), "handleShareDisplay",
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee6() {
      var _this$state3, mediaConstraints, localMediaStream, mediaStream, screenStream, transceiver;

      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _this.wantCamera = !_this.wantCamera;

              if (!_this.state.connectionStarted) {
                _context6.next = 17;
                break;
              }

              _this$state3 = _this.state, mediaConstraints = _this$state3.mediaConstraints, localMediaStream = _this$state3.localMediaStream;

              if (!_this.wantCamera) {
                _context6.next = 9;
                break;
              }

              _context6.next = 6;
              return navigator.mediaDevices.getUserMedia(mediaConstraints);

            case 6:
              mediaStream = _context6.sent;
              _context6.next = 12;
              break;

            case 9:
              _context6.next = 11;
              return navigator.mediaDevices.getDisplayMedia(mediaConstraints);

            case 11:
              mediaStream = _context6.sent;

            case 12:
              screenStream = mediaStream.getVideoTracks()[0];
              transceiver = _this.rtcPeerConnection.getTransceivers()[0];
              localMediaStream.removeTrack(localMediaStream.getTracks()[0]);
              localMediaStream.addTrack(screenStream);
              transceiver['sender'].replaceTrack(screenStream);

            case 17:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));

    _defineProperty(_assertThisInitialized(_this), "sendRoomKey", function () {
      var _this$state4 = _this.state,
          roomKey = _this$state4.roomKey,
          socketID = _this$state4.socketID;

      if (!roomKey) {
        var key = (0, _utils.generateRoomKey)();
        var roomData = (0, _utils.createMessage)(_constants.TYPE_ROOM, (0, _utils.createPayload)(key, socketID));

        _this.setState({
          roomKey: key
        });

        _this.socket.send(JSON.stringify(roomData));

        alert(key);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleSocketConnection", function (socketID) {
      _this.setState({
        socketID: socketID
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleConnectionReady", function (message) {
      console.log('Inside handleConnectionReady: ', message);

      if (message.startConnection) {
        _this.setState({
          connectionStarted: message.startConnection
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "addRemoteStream", function (remoteMediaStream) {
      _this.setState({
        remoteMediaStream: remoteMediaStream
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleSubmit", function (event) {
      event.preventDefault();
      var _this$state5 = _this.state,
          text = _this$state5.text,
          socketID = _this$state5.socketID; // send the roomKey
      // Remove leading and trailing whitespace

      if (text.trim()) {
        var roomKeyMessage = (0, _utils.createMessage)(_constants.TYPE_ROOM, (0, _utils.createPayload)(text, socketID));

        _this.socket.send(JSON.stringify(roomKeyMessage));
      }

      ;

      _this.setState({
        text: '',
        roomKey: text.trim()
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (event) {
      _this.setState({
        text: event.target.value
      });
    });

    var _mediaConstraints = props.mediaConstraints,
        iceServers = props.iceServers,
        URL = props.URL; // build iceServers config for RTCPeerConnection

    var iceServerURLs = (0, _utils.buildServers)(iceServers);
    _this.state = {
      iceServers: iceServerURLs || _constants.DEFAULT_ICE_SERVERS,
      mediaConstraints: _mediaConstraints || _constants.DEFAULT_CONSTRAINTS,
      localMediaStream: null,
      remoteMediaStream: null,
      roomKey: null,
      socketID: null,
      connectionStarted: false,
      text: ''
    };
    _this.wantCamera = true;
    _this.socket = new WebSocket(_this.props.URL);
    _this.rtcPeerConnection = new RTCPeerConnection({
      iceServers: _this.state.iceServers
    });
    return _this;
  }

  _createClass(RTCMesh, [{
    key: "render",
    value: function render() {
      var _this$state6 = this.state,
          localMediaStream = _this$state6.localMediaStream,
          remoteMediaStream = _this$state6.remoteMediaStream,
          text = _this$state6.text,
          roomKey = _this$state6.roomKey,
          socketID = _this$state6.socketID,
          iceServers = _this$state6.iceServers,
          connectionStarted = _this$state6.connectionStarted;
      var sendMessage = this.socket.send.bind(this.socket);
      return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_Websocket["default"], {
        socket: this.socket,
        setSendMethod: this.setSendMethod,
        handleSocketConnection: this.handleSocketConnection,
        handleConnectionReady: this.handleConnectionReady,
        handleOffer: this.handleOffer,
        handleAnswer: this.handleAnswer,
        handleIceCandidate: this.handleIceCandidate
      }), _react["default"].createElement(_PeerConnection["default"], {
        rtcPeerConnection: this.rtcPeerConnection,
        iceServers: iceServers,
        localMediaStream: localMediaStream,
        addRemoteStream: this.addRemoteStream,
        startConnection: connectionStarted,
        sendMessage: sendMessage,
        roomInfo: {
          socketID: socketID,
          roomKey: roomKey
        }
      }), _react["default"].createElement(_RTCVideo["default"], {
        mediaStream: localMediaStream
      }), _react["default"].createElement(_RTCVideo["default"], {
        mediaStream: remoteMediaStream
      }), _react["default"].createElement(_Form["default"], {
        handleSubmit: this.handleSubmit,
        handleChange: this.handleChange,
        hasRoomKey: roomKey,
        text: text
      }), _react["default"].createElement("section", {
        className: "button-container"
      }, _react["default"].createElement("div", {
        className: "button button--start-color",
        onClick: this.openCamera
      }), _react["default"].createElement("button", {
        onClick: this.handleShareDisplay
      }, "Share Screen"), _react["default"].createElement("div", {
        className: "button button--stop-color",
        onClick: null
      })));
    }
  }]);

  return RTCMesh;
}(_react.Component);

var _default = RTCMesh;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,